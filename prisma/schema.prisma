// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Text {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  Info          Info?
  Article       Article[]
  Testimonial   Testimonial[]
  Project       Project[]

  @@unique([email])
  @@map("user")
}

model Info {
  id       Int    @id @default(autoincrement())
  mainRole String
  moto     String
  github   String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  Links    Links?

  @@unique([userId])
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Testimonial {
  id        Int    @id @default(autoincrement())
  name      String
  testimony String
  orgName   String
  role      String
  imageUrl  String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  description String
  githubUrl   String
  liveLink    String
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Links {
  id       Int    @id @default(autoincrement())
  linkedIn String
  x        String
  github   String
  telegram String
  website  String
  email    String
  infoId   Int
  info     Info   @relation(fields: [infoId], references: [id])

  @@unique([infoId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
