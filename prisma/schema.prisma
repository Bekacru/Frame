generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Text {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  Info          Info?
  Article       Article[]
  Testimonial   Testimonial[]
  Project       Project[]
  skill         Skill[]


  @@unique([email])
  @@map("user")
}

enum Word {
  Developer
  Engineer
}


model Skill {
  id        Int @id @default(autoincrement())
  name      String
  imageUrl  String
  userId    String
  user      User @relation(fields: [userId], references: [id])
}


model Info {
  id       Int    @id @default(autoincrement())
  mainRole String @default("Full stack Developer")
  moto     String @default("I create full-stack products that people love, with a focus on user experience and scalable architecture.")
  github   String? 
  word   Word
  homeImageUrl String @default("https://static7.tgstat.ru/channels/_0/bc/bc8ed4944ea88e1bdf520898b60b5ac6.jpg")
  aboutImageUrl String @default("https://static7.tgstat.ru/channels/_0/bc/bc8ed4944ea88e1bdf520898b60b5ac6.jpg")
  aboutDescription String @default("I’m a passionate developer with a diverse skill set spanning DevOps, Web3, and full-stack development. My expertise includes automating infrastructure with Terraform, Docker, Kubernetes, and CI/CD pipelines, as well as developing decentralized applications on Ethereum and Solana. I’ve worked on projects ranging from blockchain wallet integrations to building serverless platforms and AI-driven apps. and I enjoy tackling complex problems in both backend and front-end development.")
  
  userId   String 
  user     User   @relation(fields: [userId], references: [id])
  Links    Links?


  @@unique([userId])
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Testimonial {
  id        Int    @id @default(autoincrement())
  name      String
  testimony String
  orgName   String
  role      String
  imageUrl  String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  description String
  githubUrl   String
  liveLink    String
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Links {
  id       Int    @id @default(autoincrement())
  linkedIn String @default("https://www.linkedin.com/in/yeabsra-ashebir-tech-nerd-8a3a80267/")
  x        String @default("x.com/technerd556")
  github   String @default("github.com/yeabnoah")
  telegram String @default("t.me/technerd345")
  website  String @default("https://technerd.345")
  infoId   Int 
  info     Info   @relation(fields: [infoId], references: [id])

  @@unique([infoId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
